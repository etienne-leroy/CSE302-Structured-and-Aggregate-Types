CSE302 - Final Project - Structured and Aggregate Types

Etienne Leroy, Amine Roudani, Lucas Nelson


	- Extending the parser to handle BX pointers and arrays : 

		To achieve this objective, we first modified the lexer (bxlexer.py). We added new keywords (line 29), new tokens (line 73), and punctuation (line 112) to handle the new pointers and arrays.
		
		To extend the parser, we define new types for pointers and arrays, as well as definitions for the null pointer, referencing, alloc, and other assignables.
		The new type definitions can be found from line 100, followed by referencing, the null pointer, the 'ALLOC' expression, and the assignables,
		capable of parsing '*' pointer and '[]' array expressions. 


	- Type checking BX pointers and arrays : 

		We extended the type checker to handle pointers and arrays, and added new cases for pointers and arrays. 

	- Extending TAC with 'load' and 'store' instructions :

	- Emitting x64 for these Extensions : 
		Added six functions to extend x64 emissions for asssignment tasks:
		- _emit_memory_array_copy
		- _emit_memory_load
		- _emit_memory_store
		- _emit_memory_pointer
		- _emit_memory_allocation
		- _emit_memory_initialization

		The first four functions clearly directly serve to extend x64 for arrays, pointers, load, and store,
		all of which were assigned tasks.
		Meanwhile, the last two are helper functions to facilitate the initialization and dynamic allocation of memory
		directly from the bxmm.py file.